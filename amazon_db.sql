--Amazon Project - Advanced SQL

--Create database
CREATE DATABASE amazon_db;

--Create tables

--Category table

CREATE TABLE category
(
  category_id	INT PRIMARY KEY,
  category_name VARCHAR(20)
);

--Customers Table

CREATE TABLE customers
(
  customer_id INT PRIMARY KEY,	
  first_name	VARCHAR(20),
  last_name	VARCHAR(20),
  state VARCHAR(20),
  address VARCHAR(5) DEFAULT ('xxxx')
);

--Sellers Table

CREATE TABLE sellers
(
  seller_id INT PRIMARY KEY,
  seller_name	VARCHAR(25),
  origin VARCHAR(15)
);

--Products Table

CREATE TABLE products
  (
  product_id INT PRIMARY KEY,	
  product_name VARCHAR(50),	
  price	FLOAT,
  cogs	FLOAT,
  category_id INT, -- FK 
  CONSTRAINT product_fk_category FOREIGN KEY(category_id) REFERENCES category(category_id)
);

--Orders Table
CREATE TABLE orders
(
  order_id INT PRIMARY KEY, 	
  order_date	DATE,
  customer_id	INT, -- FK
  seller_id INT, -- FK 
  order_status VARCHAR(15),
  CONSTRAINT orders_fk_customers FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
  CONSTRAINT orders_fk_sellers FOREIGN KEY (seller_id) REFERENCES sellers(seller_id)
);

--Order items Table 
CREATE TABLE order_items
(
  order_item_id INT PRIMARY KEY,
  order_id INT,	-- FK 
  product_id INT, -- FK
  quantity INT,	
  price_per_unit FLOAT,
  CONSTRAINT order_items_fk_orders FOREIGN KEY (order_id) REFERENCES orders(order_id),
  CONSTRAINT order_items_fk_products FOREIGN KEY (product_id) REFERENCES products(product_id)
);

-- Payment Table

CREATE TABLE payments
(
  payment_id	
  INT PRIMARY KEY,
  order_id INT, -- FK 	
  payment_date DATE,
  payment_status VARCHAR(20),
  CONSTRAINT payments_fk_orders FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

-- Shippings Table
CREATE TABLE shippings
(
  shipping_id	INT PRIMARY KEY,
  order_id	INT, -- FK
  shipping_date DATE,	
  return_date	 DATE,
  shipping_providers	VARCHAR(15),
  delivery_status VARCHAR(15),
  CONSTRAINT shippings_fk_orders FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

-- Inventory Table
CREATE TABLE inventory
(
  inventory_id INT PRIMARY KEY,
  product_id INT, -- FK
  stock INT,
  warehouse_id INT,
  last_stock_date DATE,
  CONSTRAINT inventory_fk_products FOREIGN KEY (product_id) REFERENCES products(product_id)
);

--Exploratory Data Analysis (EDA)

SELECT * FROM category;
SELECT * FROM customers;
SELECT * FROM inventory;
SELECT * FROM order_items;
SELECT * FROM orders;
SELECT * FROM payments;
SELECT * FROM products;
SELECT * FROM sellers;
SELECT * FROM Shippings;

SELECT DISTINCT payment_status FROM payments;

SELECT * FROM Shippings
WHERE return_date IS NOT NULL;

SELECT * FROM Shippings
WHERE return_date IS NULL;

-- Check for 6747

SELECT * FROM orders
WHERE order_id = 6747;

SELECT * FROM payments
WHERE order_id = 6747;


----Business Problems - Advanced Analysis----

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/
--oi - 0 - pr
--prod id 
--sum qty * price per unit
--group by prod id
--top 10 product

SELECT * FROM order_items;

--Creating new cloum for total sales
ALTER TABLE order_items
ADD COLUMN total_sale FLOAT;

-- updating cloum total_sales with qty * price per unit
UPDATE order_items
SET total_sale = quantity * price_per_unit;

SELECT * FROM order_items
ORDER BY quantity DESC;

SELECT oi.product_id , p.product_name , 
SUM(oi.total_sale) AS total_sale , 
COUNT (o.order_id) AS total_orders
FROM orders as o
JOIN
order_items as oi
ON oi.order_id = o.order_id
JOIN
products as p
ON p.product_id = oi.product_id
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 10;

/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/
--category_id , category_name , total revenue , total contribution
--oi--products -- cate
--group by cat id and name sum total (oi)

SELECT 
	p.category_id,
	c.category_name,
	SUM(oi.total_sale) AS total_sale,
	SUM(oi.total_sale)/(SELECT SUM(total_sale) FROM order_items) * 100 AS contribution
FROM order_items AS oi
JOIN
products AS p
ON p.product_id = oi.product_id
LEFT JOIN category AS c
ON c.category_id = p.category_id 
GROUP BY 1, 2
order BY 3 DESC;

/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/
--o--oi--cx
--group by cx id and cx name sum(total_sale)/no orders

SELECT 
	c.customer_id,
	CONCAT(c.first_name, ' ' , c.last_name) AS full_name,
	SUM(total_sale)/COUNT(o.order_id) as AOV,
	COUNT(o.order_id) AS total_orders ---filter
FROM orders AS o
JOIN 
customers AS c
ON c.customer_id = o.customer_id
JOIN 
order_items AS oi
ON oi.order_id = o.order_id
GROUP BY 1, 2
HAVING COUNT(o.order_id) > 5;


/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

--last 1 year data
--each month -- their sale and their prev month sale
--window lag
SELECT 
	year,
	month,
	total_sale AS current_month_sale,
	LAG(total_sale,1) OVER(ORDER BY year, month) AS last_month_sale
FROM
(
SELECT
	EXTRACT(YEAR FROM o.order_date) AS year,
	EXTRACT(MONTH FROM o.order_date) AS month,
	ROUND(SUM(oi.total_sale::numeric), 2) AS total_sale
FROM orders AS o
JOIN
order_items AS oi
ON oi.order_id = o.order_id
WHERE o.order_date >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY 1, 2
ORDER BY year, month
) AS t1


/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/
--Approach 1
SELECT * 
--reg_date - CURRENT_DATE
FROM customers
WHERE customer_id NOT IN
( SELECT 
	DISTINCT customer_id
	FROM orders
);
--Approach 2
SELECT *
FROM customers AS c
LEFT JOIN
orders AS o
ON o.customer_id = c.customer_id
WHERE o.customer_id IS NULL;

/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/
WITH ranking_table
AS
(
SELECT 
	c.state,
	cat.category_name,
	SUM(oi.total_sale) AS total_sale,
	RANK() OVER(PARTItiON BY c.state ORDER BY SUM(oi.total_sale) ASC) AS RANK
FROM orders AS o
JOIN 
customers AS c
ON o.customer_id = c.customer_id
JOIN
order_items AS oi
ON o.order_id = oi.order_id 
JOIN 
products AS p
ON oi.product_id = p.product_id
JOIN
category as cat
ON cat.category_id = p.category_id
GROUP BY 1, 2
)
SELECT * FROM ranking_table
WHERE rank = 1
--ORDER BY 1, 3 ASC;

/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/
--cx - o - oi
--cx id group by sum(total_sale)
--order by total sale
--rank
SELECT 
	c.customer_id,
	CONCAT(c.first_name, ' ' , c.last_name) AS full_name,
	SUM(total_sale) AS CLTV,
	DENSE_RANK() OVER(ORDER BY SUM(total_sale) DESC) AS cx_ranking
FROM orders AS o
JOIN 
customers AS c
ON c.customer_id = o.customer_id
JOIN 
order_items AS oi
ON oi.order_id = o.order_id
GROUP BY 1, 2;

/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

SELECT 
	i.inventory_id,
	p.product_name,
	i.stock AS current_stock_left,
	i.last_stock_date,
	i.warehouse_id	
FROM inventory AS i
JOIN
products AS p
ON p.product_id = i.product_id
WHERE i.stock < 10;


/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

--cx -- o-- ship
SELECT 
	c.*,
	o.*,
	s.shipping_date - o.order_date AS days_took_to_ship
FROM orders AS o
JOIN
customers AS c
ON c.customer_id = o.customer_id
JOIN
shippings AS s
ON o.order_id = s.order_id
WHERE s.shipping_date - o.order_date > 3;

/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

SELECT 
	p.payment_status,
	COUNT(*) AS total_count,
	COUNT(*)::numeric /(SELECT COUNT(*) FROM payments)::numeric * 100
FROM orders AS o
JOIN
payments AS p
ON o.order_id = p.order_id
GROUP BY 1;

/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/

WITH top_sellers
AS
(
SELECT 
	s.seller_id,
	s.seller_name,
	SUM(oi.total_sale) AS total_sale
FROM orders AS o
JOIN
sellers AS s
ON o.seller_id = s.seller_id
JOIN
order_items AS oi
ON oi.order_id = o.order_id 
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 5
),
seller_reports 
AS
(SELECt o.seller_id, ts.seller_name, o.order_status, COUNT(*)AS total_orders
FROM orders as o
JOIN
top_sellers as ts
ON ts.seller_id = o.seller_id
WHERE o.order_status NOT IN ('Inprogress' , 'Returned')
GROUP BY 1, 2, 3
)
SELECT 
	seller_id,
	seller_name,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END) AS Completed_orders,
	SUM(CASE WHEN order_status = 'Cancelled' THEN total_orders ELSE 0 END) AS Cancelled_orders,
	SUM (total_orders) AS total_orders,
	SUM(CASE WHEN order_status = 'Completed' THEN total_orders ELSE 0 END):: numeric/ SUM (total_orders):: numeric * 100 AS successful_orders_percentage
FROM seller_reports
GROUP BY 1, 2;


/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/
--o - oi - p
-- group pid sum(total_sale - cogs * qty) AS profit

SELECT
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER(ORDER BY profit_margin DESC) AS product_ranking
FROM
(
SELECT 
	p.product_id,
	p.product_name,
	--SUM(total_sale - (p.cogs * oi.quantity)) AS profit,
	SUM(total_sale - (p.cogs * oi.quantity))/SUM(total_sale) * 100 AS profit_margin
FROM order_items AS oi
JOIN 
products AS p
ON oi.product_id = p.product_id
GROUP BY 1, 2
) AS t1



/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

SELECT 
	p.product_id,
	p.product_name,
	COUNT (*) as total_unit_sold,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS total_returend,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END)::numeric /COUNT(*)::numeric * 100 AS return_percentage
FROM order_items AS oi
JOIN 
products AS p
ON oi.product_id = p.product_id
JOIN orders as o
ON o.order_id = oi.order_id
GROUP BY 1, 2
ORDER BY 5 DESC;

/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/
 SELECT 
    o.order_id,
    o.order_date,
    p.payment_date,
    c.customer_id,
    CONCAT(c.first_name, ' ' , c.last_name) AS full_name,
    s.delivery_status AS shipment_status
FROM orders o
JOIN payments p 
ON o.order_id = p.order_id
LEFT JOIN Shippings s 
ON o.order_id = s.order_id
JOIN customers c 
ON o.customer_id = c.customer_id
WHERE 
    p.payment_status = 'Payment Successed'
    AND s.delivery_status IS NULL;
	


/*
15. Inactive Sellers
Identify sellers who haven’t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/
WITH cte1 -- as these sellers has not done any sale in last 6 month
AS
(SELECT * FROM sellers
WHERE seller_id NOT IN (SELECT seller_id FROM orders WHERE order_date >= CURRENT_DATE - INTERVAL '6 month')
)

SELECT 
o.seller_id,
MAX(o.order_date) as last_sale_date,
MAX(oi.total_sale) as last_sale_amount
FROM orders as o
JOIN 
cte1
ON cte1.seller_id = o.seller_id
JOIN order_items as oi
ON o.order_id = oi.order_id
GROUP BY 1;
/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

SELECT 
c_full_name AS customer,
total_orders,
total_return,
CASE 
	WHEN total_return > 5 THEN 'Returning_customers' ELSE 'NEW'
END AS cx_category
FROM
(
SELECT 
	CONCAT(c.first_name, ' ', c.last_name) AS c_full_name,
	COUNT(o.order_id) AS total_orders,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) AS total_return
FROM orders AS o
JOIN 
customers AS c
ON c.customer_id = o.customer_id
JOIN
order_items AS oi
ON oi.order_id = o.order_id
GROUP BY 1
);

/*
18. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/


SELECT * FROM
(
SELECT
	c.state,
	CONCAT(c.first_name, ' ', c.last_name) AS customers,
	COUNT(o.order_id) AS total_orders,
	SUM(total_sale) AS total_sale,
	DENSE_RANK() OVER(PARTITION BY c.state ORDER BY COUNT(o.order_id) DESC ) AS rank
FROM orders AS o
JOIN
order_items AS oi
ON oi.order_id = o.order_id
JOIN
customers AS c
ON 
c.customer_id = o.customer_id
GROUP BY 1, 2
) AS t1
WHERE rank <=5

/*
17. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/


-- oi - o - shipping
-- group by shipping provider id Sum(totak sale), total orders

SELECT 
	s.shipping_providers,
	COUNT(o.order_id) AS order_handled,
	SUM(oi.total_sale) AS total_sale,
	COALESCE(AVG (s.return_date - s.shipping_date), 0) AS average_days
FROM orders AS o
JOIN
order_items AS oi
ON oi.order_id = o.order_id
JOIN
shippings AS s
ON 
s.order_id = o.order_id
GROUP BY 1;


/*
18. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result

Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

--JOIN o - oi - p
--filter 2022
--group by p id , sum(total sale)


--JOIN o - oi - p
--filter 2023
--group by p id , sum(total sale)

--JOIN 1 and 2
WITH last_year_sale
AS
(
SELECT 
	p.product_id,
	p.product_name,
	SUM(oi.total_sale) AS revenue
FROM orders AS o
JOIN
order_items AS oi
ON oi.order_id = o.order_id
JOIN
products AS p
ON
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2022
GROUP BY 1, 2
),
current_year_sale
AS
(
SELECT 
	p.product_id,
	p.product_name,
	SUM(oi.total_sale) AS revenue
FROM orders AS o
JOIN
order_items AS oi
ON oi.order_id = o.order_id
JOIN
products AS p
ON
p.product_id = oi.product_id
WHERE EXTRACT(YEAR FROM o.order_date) = 2023
GROUP BY 1, 2
)
SELECT 
	cs.product_id,
	ls.revenue AS last_year_revenue,
	cs.revenue AS current_year_revenue,
	ls.revenue - cs.revenue as Rev_diff,
	ROUND((cs.revenue - ls.revenue)::numeric/ls.revenue::numeric * 100,2) AS Revenue_dec_ratio
FROM last_year_sale AS ls
JOIN
current_year_sale AS cs
ON ls.product_id = cs.product_id
WHERE ls.revenue > cs.revenue
ORDER BY 5 DESC
LIMIT 10;


/*
Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 
*/

CREATE OR REPLACE PROCEDURE add_sales
(
p_order_id INT,
p_customer_id INT,
p_seller_id INT,
p_order_item_id INT,
p_product_id INT,
p_quantity INT
)
LANGUAGE plpgsql
AS $$

DECLARE 
--all variable 
v_count INT;
v_price FLOAT;
v_product VARCHAR(50);

BEGIN
--all your code and logic(Fetching product name and price based on p id enetred )
	SELECT price,product_name
	INTO v_price, v_product
	FROM products
	WHERE product_id = p_product_id;

--(Checking stock and product availabilty in inventory)
	SELECT 
		COUNT(*)
		INTO
		v_count
	FROM inventory
	WHERE
		product_id = p_product_id
		AND 
		stock >= p_quantity;
		
	If v_count > 0 THEN
	--add into orders and orders_items tabke
	--update inventory
		INSERT INTO orders(order_id, order_date, customer_id, seller_id)
		VALUES (p_order_id, CURRENT_DATE, p_customer_id, p_seller_id);
		
	 -- adding into order list
		INSERT INTO order_items(order_item_id,order_id, product_id, quantity, price_per_unit, total_sale )
		VALUES (p_order_item_id, p_order_id, p_product_id, p_quantity,v_price, v_price*p_quantity);
		
	  --updating inventory
		UPDATE inventory
		SET stock =  stock - p_quantity
		WHERE product_id = p_product_id;

		RAISE NOTICE 'Thankyou product: % sale has been added also inventory stock updates',v_product;
		
	ELSE
	RAISE NOTICE 'Thank you for your info the product: % is not available', v_product;

	END IF;

END;
$$

call add_sales
(
25002 , 2 , 5, 25004, 1 , 40
);

